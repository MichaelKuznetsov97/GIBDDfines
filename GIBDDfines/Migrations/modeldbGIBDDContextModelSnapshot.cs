// <auto-generated />
using GIBDDfines.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace GIBDDfines.Migrations
{
    [DbContext(typeof(modeldbGIBDD2Context))]
    partial class modeldbGIBDDContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GIBDDfines.Models.Autoes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<DateTime?>("DateRelease")
                        .HasColumnName("Date_release")
                        .HasColumnType("datetime");

                    b.Property<int>("IdColor")
                        .HasColumnName("ID_Color");

                    b.Property<int>("IdMarkModel")
                        .HasColumnName("ID_MarkModel");

                    b.Property<int>("IdOwner")
                        .HasColumnName("ID_Owner");

                    b.Property<int>("IdTcateg")
                        .HasColumnName("ID_TCateg");

                    b.Property<int>("IdType")
                        .HasColumnName("ID_Type");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.Property<int?>("Pengine")
                        .HasColumnName("PEngine");

                    b.HasKey("Id");

                    b.HasIndex("IdColor")
                        .HasName("IX_FK_Auto_Color");

                    b.HasIndex("IdMarkModel")
                        .HasName("IX_FK_Auto_Model");

                    b.HasIndex("IdOwner")
                        .HasName("IX_FK_Auto_AutoOwner");

                    b.HasIndex("IdTcateg")
                        .HasName("IX_FK_Auto_TSCategory");

                    b.HasIndex("IdType")
                        .HasName("IX_FK_Auto_TypeTS");

                    b.ToTable("Autoes");
                });

            modelBuilder.Entity("GIBDDfines.Models.AutoOwners", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<DateTime?>("DateConfisc")
                        .HasColumnName("Date_confisc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateEntered")
                        .HasColumnName("Date_entered")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateReturn")
                        .HasColumnName("Date_return")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Number")
                        .HasColumnType("nchar(10)");

                    b.HasKey("Id");

                    b.ToTable("AutoOwners");
                });

            modelBuilder.Entity("GIBDDfines.Models.Colors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("GIBDDfines.Models.LinkOwnCateg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int>("IdAowner")
                        .HasColumnName("ID_AOwner");

                    b.Property<int>("IdCategory")
                        .HasColumnName("ID_Category");

                    b.HasKey("Id");

                    b.HasIndex("IdAowner")
                        .HasName("IX_FK_CategPermit_AutoOwner");

                    b.HasIndex("IdCategory")
                        .HasName("IX_FK_CategPermit_TSCategory");

                    b.ToTable("Link_OwnCateg");
                });

            modelBuilder.Entity("GIBDDfines.Models.Marks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("GIBDDfines.Models.Models", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int>("IdMark")
                        .HasColumnName("ID_Mark");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdMark")
                        .HasName("IX_FK_Model_Mark");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("GIBDDfines.Models.Police", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("char(10)");

                    b.Property<int>("IdTitle")
                        .HasColumnName("ID_Title");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdTitle")
                        .HasName("IX_FK_Police_Title");

                    b.ToTable("Police");
                });

            modelBuilder.Entity("GIBDDfines.Models.Punishments", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DatePay")
                        .HasColumnName("Date_pay")
                        .HasColumnType("datetime");

                    b.Property<string>("Describe")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("IdAowner")
                        .HasColumnName("ID_AOwner");

                    b.Property<int>("IdAuto")
                        .HasColumnName("ID_Auto");

                    b.Property<string>("IdPolice")
                        .IsRequired()
                        .HasColumnName("ID_Police")
                        .HasColumnType("char(10)");

                    b.Property<int>("IdTpunish")
                        .HasColumnName("ID_TPunish");

                    b.Property<int?>("Penalty");

                    b.HasKey("Id");

                    b.HasIndex("IdAowner");

                    b.HasIndex("IdAuto")
                        .HasName("IX_FK_Punishment_Auto");

                    b.HasIndex("IdPolice")
                        .HasName("IX_FK_Punishment_Police");

                    b.HasIndex("IdTpunish")
                        .HasName("IX_FK_Punishment_TypePunishment");

                    b.ToTable("Punishments");
                });

            modelBuilder.Entity("GIBDDfines.Models.Titles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("GIBDDfines.Models.Tscategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Describe")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("TSCategories");
                });

            modelBuilder.Entity("GIBDDfines.Models.TypePunishments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("TypePunishments");
                });

            modelBuilder.Entity("GIBDDfines.Models.TypeTs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("TypeTS");
                });

            modelBuilder.Entity("GIBDDfines.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GIBDDfines.Models.Autoes", b =>
                {
                    b.HasOne("GIBDDfines.Models.Colors", "IdColorNavigation")
                        .WithMany("Autoes")
                        .HasForeignKey("IdColor")
                        .HasConstraintName("FK_Autoes_Colors");

                    b.HasOne("GIBDDfines.Models.Models", "IdMarkModelNavigation")
                        .WithMany("Autoes")
                        .HasForeignKey("IdMarkModel")
                        .HasConstraintName("FK_Autoes_Models");

                    b.HasOne("GIBDDfines.Models.AutoOwners", "IdOwnerNavigation")
                        .WithMany("Autoes")
                        .HasForeignKey("IdOwner")
                        .HasConstraintName("FK_Autoes_AutoOwners");

                    b.HasOne("GIBDDfines.Models.Tscategories", "IdTcategNavigation")
                        .WithMany("Autoes")
                        .HasForeignKey("IdTcateg")
                        .HasConstraintName("FK_Autoes_TSCategories");

                    b.HasOne("GIBDDfines.Models.TypeTs", "IdTypeNavigation")
                        .WithMany("Autoes")
                        .HasForeignKey("IdType")
                        .HasConstraintName("FK_Autoes_TypeTS");
                });

            modelBuilder.Entity("GIBDDfines.Models.LinkOwnCateg", b =>
                {
                    b.HasOne("GIBDDfines.Models.AutoOwners", "IdAownerNavigation")
                        .WithMany("LinkOwnCateg")
                        .HasForeignKey("IdAowner")
                        .HasConstraintName("FK_Link_OwnCateg_AutoOwners");

                    b.HasOne("GIBDDfines.Models.Tscategories", "IdCategoryNavigation")
                        .WithMany("LinkOwnCateg")
                        .HasForeignKey("IdCategory")
                        .HasConstraintName("FK_CategPermit_AutoOwner");
                });

            modelBuilder.Entity("GIBDDfines.Models.Models", b =>
                {
                    b.HasOne("GIBDDfines.Models.Marks", "IdMarkNavigation")
                        .WithMany("Models")
                        .HasForeignKey("IdMark")
                        .HasConstraintName("FK_Model_Mark");
                });

            modelBuilder.Entity("GIBDDfines.Models.Police", b =>
                {
                    b.HasOne("GIBDDfines.Models.Titles", "IdTitleNavigation")
                        .WithMany("Police")
                        .HasForeignKey("IdTitle")
                        .HasConstraintName("FK_Police_Title");
                });

            modelBuilder.Entity("GIBDDfines.Models.Punishments", b =>
                {
                    b.HasOne("GIBDDfines.Models.AutoOwners", "IdAownerNavigation")
                        .WithMany("Punishments")
                        .HasForeignKey("IdAowner")
                        .HasConstraintName("FK_Punishments_AutoOwners");

                    b.HasOne("GIBDDfines.Models.Autoes", "IdAutoNavigation")
                        .WithMany("Punishments")
                        .HasForeignKey("IdAuto")
                        .HasConstraintName("FK_Punishments_Autoes");

                    b.HasOne("GIBDDfines.Models.Police", "IdPoliceNavigation")
                        .WithMany("Punishments")
                        .HasForeignKey("IdPolice")
                        .HasConstraintName("FK_Punishments_Police");

                    b.HasOne("GIBDDfines.Models.TypePunishments", "IdTpunishNavigation")
                        .WithMany("Punishments")
                        .HasForeignKey("IdTpunish")
                        .HasConstraintName("FK_Punishments_TypePunishments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GIBDDfines.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GIBDDfines.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GIBDDfines.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GIBDDfines.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
